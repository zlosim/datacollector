<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ffh_5vf_5bb">
    <title>Comparing UDP Source Origins</title>
    <conbody>
        <p><indexterm>UDP Source origins<indexterm>comparing</indexterm></indexterm>The UDP Source
            and UDP Multithreaded Source origins are very similar. The main differentiator is that
            the UDP Multithreaded Source can use multiple threads to process data within the
            pipeline. </p>
        <p>The UDP Multithreaded Source has a processing queue that aids multithreaded processing.
            But use of this queue can slow processing under certain circumstances.</p>
        <p>The following table describes some cases when you might want to use each origin:<table
                frame="all" rowsep="1" colsep="1" id="table_u5t_zwf_5bb">
                <tgroup cols="2">
                    <colspec colname="c1" colnum="1" colwidth="1.5*"/>
                    <colspec colname="c2" colnum="2" colwidth="3.5*"/>
                    <thead>
                        <row>
                            <entry>Origin</entry>
                            <entry>Ideally Used When</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><xref href="UDPMulti.dita#concept_wng_g5f_5bb">UDP Multithreaded
                                    Source</xref></entry>
                            <entry>
                                <ul id="ul_cgc_jxf_5bb">
                                    <li>Epoll support enables the use of multiple receiver threads
                                        to pass data to the pipeline.</li>
                                    <li>Complex pipeline requires longer processing time.</li>
                                </ul>
                                <p>or</p>
                                <p>
                                    <ul id="ul_fcv_mxf_5bb">
                                        <li>Lack of epoll support allows only a single receiver
                                            thread to pass data to the pipeline.</li>
                                        <li>High volumes of data.</li>
                                    </ul>
                                </p>
                            </entry>
                        </row>
                        <row>
                            <entry><xref href="UDP.dita#concept_rst_2y5_1s">UDP Source</xref>
                            </entry>
                            <entry>
                                <ul id="ul_f2w_2xf_5bb">
                                    <li>Epoll support enables the use of multiple receiver threads
                                        to pass data to the pipeline.</li>
                                    <li>Relatively simple pipeline enables speedy <ph
                                            conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"
                                        /> processing. </li>
                                </ul>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table></p>
        <p><ph conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/>
            also provides a <xref href="UDPtoKafka.dita#concept_jzq_jcz_pw">UDP to Kafka
                origin</xref> for reading large volumes of data from multiple UDP ports and writing
            the data immediately to Kafka, without additional processing. </p>
    </conbody>
</concept>
