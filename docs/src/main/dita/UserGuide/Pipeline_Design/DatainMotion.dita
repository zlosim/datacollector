<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_y1r_zky_bt">
 <title>Data in Motion</title>
 <shortdesc>Data passes through the pipeline in <term>batches</term>. This is how it
        works:</shortdesc>
 <conbody>
  <p><indexterm>pipeline<indexterm>batch and processing
    overview</indexterm></indexterm><indexterm>batch</indexterm>The origin creates a batch as it
   reads data from the origin system or as data arrives from the origin system, noting the offset.
   The offset is the location where the origin stops reading.</p>
  <p>The origin sends the batch when the batch is full or when the batch wait time limit elapses.
   The batch moves through the pipeline from processor to processor until it reaches pipeline
   destinations.</p>
  <p>Destinations write the batch to destination systems, and <ph
        conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/> commits
      the offset internally. Based on the pipeline delivery guarantee, <ph
        conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/> either
      commits the offset as soon as it writes to any destination system or after receiving
      confirmation of the write from all destination systems. </p>
  <p>After the offset commit, the origin stage creates a new batch. </p>
  <p>Note that this describes general pipeline behavior. Behavior can differ based on the specific
      pipeline configuration. For example, for the Kafka Consumer, the offset is stored in Kafka or
      ZooKeeper. And for origin systems that do not store data, such as Omniture and HTTP Client,
      offsets are not stored because they aren't relevant. </p>
 </conbody>
</concept>
