<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_azz_tq4_lx">
 <title>Summary</title>
 <conbody>
        <p><indexterm>dataflow triggers<indexterm>summary</indexterm></indexterm><indexterm>event
                    framework<indexterm>summary</indexterm></indexterm>Here are the key points about
            dataflow triggers and the event framework: <ol id="ol_fz4_ygh_tx">
                <li>You can use the event framework in any pipeline where the logic suits your
                    needs. </li>
                <li>The event framework generates pipeline-related events and stage-related
                    events.</li>
                <li>Pipeline events are generated when the pipeline starts and stops. For details,
                    see <xref href="PipelineEvents.dita#concept_amg_2qr_t1b"/>.</li>
                <li>You can configure each pipeline event type to pass to a single executor or to
                    another pipeline for more complex processing.</li>
                <li>Stage events are generated based on the processing logic of the stage. For a
                    list of event-generating stages, see <xref
                        href="StageEvents.dita#concept_zrl_mhn_lx"/>.</li>
                <li>Events generate <term>event records</term> to pass relevant information
                    regarding the event, such as the path to the file that was closed. <p><ph
                            conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/ph-ERecord-Fields"
                        />
                    </p></li>
                <li>In the simplest use case, you can route stage event records to a destination to
                    save event information.</li>
                <li>To trigger a task with an event, use an executor stage. <p>For a list of logical
                        event generation and executor pairings, see <xref
                            href="LogicalPairings.dita#concept_scs_3hh_tx"/>.</p></li>
                <li>You can add processors to event streams for stage events or to consuming
                    pipelines for pipeline events.<p>For example, you might add an Expression
                        Evaluator to add the event generation time to an event record before writing
                        it to a destination. Or, you might use a Stream Selector to route different
                        types of event records to different executors.</p></li>
                <li>When working with stage events, you cannot merge event streams with data
                    streams. </li>
                <li>You can use the Dev Data Generator and To Event development stages to generate
                    events for pipeline development and testing. For more information about the
                    development stages, see <xref
                        href="../Pipeline_Design/DevStages.dita#concept_czx_ktn_ht"/>.</li>
                <li>In data preview<ph product="SDC"> and in Monitor mode</ph>, stage-generated
                    event records display separately in the event-generating stage. Afterwards, they
                    are treated like any standard record. </li>
                <li>You can configure data preview to generate and execute pipeline events.</li>
            </ol> For examples of how you might use the event framework, see the case studies
            earlier in this chapter. </p>
 </conbody>
</concept>
