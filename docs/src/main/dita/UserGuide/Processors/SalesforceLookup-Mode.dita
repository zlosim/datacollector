<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ow1_lj3_xbb">
 <title>Lookup Mode</title>
 <conbody>
        <p><indexterm>Salesforce Lookup processor<index-base>lookup
                mode</index-base></indexterm><indexterm>Retrieve mode<indexterm>Salesforce Lookup
                    processor</indexterm></indexterm><indexterm>SOQL Query mode<indexterm>Salesforce
                    Lookup processor</indexterm></indexterm>The Salesforce Lookup processor can use
            two modes to look up Salesforce data. Select one of the following modes:</p>
        <p>
            <dl>
                <dlentry>
                    <dt>Retrieve</dt>
                    <dd>In Retrieve mode, the Salesforce Lookup processor uses the specified Id
                        field to perform the lookup, making a single <xref
                            href="https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_retrieve.htm"
                            format="html" scope="external">retrieve() Salesforce API</xref> call for
                        up to 2000 records at a time. If one or more of the IDs included in an API
                        call is invalid, Salesforce rejects the entire set of records. Then, the
                        Salesforce Lookup processor sends the records to error, using the configured
                        error handling for the stage. </dd>
                    <dd>You cannot access deleted records in Retrieve mode. </dd>
                    <dd>When using Retrieve mode, you specify the Id field to use for the lookup,
                        the Salesforce fields to return, and the object type to use. </dd>
                    <dd>The object must be retrievable in Salesforce, that is, the retrieveable
                        attribute for the object must be listed as "true". For example, you should
                        be able to retrieve data from User, but UserRecordAccess is currently not
                        retrievable. Note that this attribute can change with Salesforce releases. </dd>
                    <dd>Retrieve mode provides improved pipeline performance when the mode can be
                        used. Use SOQL Query mode when Retrieve mode cannot be used.</dd>
                </dlentry>
                <dlentry>
                    <dt>SOQL Query</dt>
                    <dd>In SOQL Query mode, the Salesforce Lookup processor makes an API call for
                        each record. The processor uses a <xref
                            href="https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_query.htm"
                            format="html" scope="external">query() API</xref> call by default, and
                        uses a <xref
                            href="https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_calls_queryall.htm"
                            format="html" scope="external">queryAll() API</xref> call when including
                        deleted records in the results. </dd>
                    <dd>When using SOQL Query mode, you configure the SOQL query to use for the
                        lookup and whether to include deleted records in the results. </dd>
                    <dd>When you configure the query, use the following
                        format:<codeblock>SELECT &lt;field1 name>, &lt;field2 name> FROM &lt;object name> WHERE &lt;field3 name> &lt;operator> &lt;expression></codeblock></dd>
                    <dd>For example, to use the account number field in the record to look up the
                        account name field in the Salesforce Account object, use the following
                        query:<codeblock>SELECT Name FROM Account WHERE AccountNumber = '${record:value('/account_number')}'</codeblock>If
                        you specify <codeph>SELECT * FROM &lt;object></codeph> in the SOQL query,
                        the processor expands <codeph>*</codeph> to all fields in the Salesforce
                        object that are accessible to the configured user. </dd>
                    <dd>Note that the processor adds components of compound fields to the query,
                        rather than adding the compound fields themselves. For example, the origin
                        adds BillingStreet, BillingCity, etc., rather than adding BillingAddress.
                        Similarly, it adds Location__Latitude__s and Location__Longitude__s rather
                        than Location__c.</dd>
                </dlentry>
            </dl>
        </p>
    </conbody>
</concept>
