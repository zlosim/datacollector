<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_qkr_trf_sw">
 <title>Time Functions</title>
 <shortdesc>Use time functions to return the current time or to transform datetime data.</shortdesc>
 <conbody>
  <p><indexterm>functions<indexterm>time functions</indexterm></indexterm><indexterm>time
                    functions<indexterm>description</indexterm></indexterm>You can replace any
            datetime argument with an expression that evaluates to a datetime value. You cannot
            replace a datetime argument with a datetime literal.</p>
        <p>You can replace any long or string argument with a literal or an expression that
            evaluates to the argument. String literals must be enclosed in single or double
            quotation marks.</p>
        <p>The expression language provides the following time functions:</p>
        <dl>
            <dlentry>
                <dt>time:createDateFromStringTZ(&lt;string>, &lt;time zone>, &lt;date format>)</dt>
                <dd>Creates a Date object based on a datetime in a String field and using the
                    specified time zone. The datetime string should not include the time zone.</dd>
                <dd>Uses the following arguments:<ul id="ul_mjs_wxy_dz">
                        <li>string - String with datetime values, not including the time zone.</li>
                        <li>time zone - Time zone associated with the datetime values. The time zone
                            is used when creating the Date object.<p>You can use the following time
                                zone formats: <ul id="ul_o25_1g5_2z">
                                    <li>&lt;area>/&lt;location> - For a list of valid time zones in
                                        this format, see <xref
                                            href="https://www.vmware.com/support/developer/vc-sdk/visdk400pubs/ReferenceGuide/timezone.html"
                                            format="html" scope="external"/>.</li>
                                    <li>Numeric time zones with the GMT prefix, such as GMT-0500 or
                                        GMT-8:00. Note that numeric-only time zones such as -500 are
                                        not supported. </li>
                                    <li>Short time zone IDs such as EST and CST - These time zones
                                        should generally be avoided because they can stand for
                                        multiple time zones, e.g. CST stands for both Central
                                        Standard Time and China Standard Time.</li>
                                </ul></p></li>
                        <li>date format - The date format used by the string data. For information
                            about date formats, see <xref
                                href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"
                                format="html" scope="external"/>.</li>
                    </ul></dd>
                <dd>For example, the following expression converts string values in the Datetime
                    field to a Date object using the time zone specified in the TZ field. It assumes
                    the date is in the format, "03/30/2016 12:15:33
                    AM":<codeblock>${time:createDateFromStringTZ(record:value('/Datetime'), 'record:value('/TZ')', 'MM-dd-yyyy hh:mm:ss a'}</codeblock></dd>
            </dlentry>
            <dlentry>
                <dt>time:extractDateFromString(&lt;string>, &lt;format string>)</dt>
                <dd>
                    <p>Extracts a Date object from a String, based on the specified date format.</p>
                    <p>Uses the following arguments:<ul id="ul_nzc_ybq_vy">
                            <li>string - String to extract the Date object from.</li>
                            <li>format string - String that specifies the date format of the data in
                                the &lt;string> argument. For information about creating a date
                                format, see <xref
                                    href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"
                                    format="html" scope="external"/>.</li>
                        </ul></p>
                </dd>
                <dd>For example, the following expression converts the string '2017-05-01
                    20:15:30.915' to a Date
                    object:<codeblock>${time:extractDateFromString('2017-05-01 20:15:30.915','yyyy-MM-dd HH:mm:ss.SSS')}</codeblock></dd>
                <dd>Return type: Date object.</dd>
            </dlentry>
            <dlentry>
                <dt>time:extractLongFromDate(&lt;Date object>, &lt;format string>)</dt>
                <dd>Extracts a long value from a Date object, based on the specified date
                    format.</dd>
                <dd>Uses the following arguments:<ul id="ul_wcq_nhr_wx">
                        <li>Date object - Date object to extract the long value from.</li>
                        <li>format string - String that specifies the format of the Date data to be
                            extracted. For information about creating a date format, see <xref
                                href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"
                                format="html" scope="external"/>.</li>
                    </ul></dd>
                <dd> For example, the following expression returns the month as a long value from
                    the Date object stored in the Timestamp
                    field:<codeblock>${time:extractLongFromDate(record:value('/Timestamp')), "MM")}</codeblock></dd>
                <dd>Return type: Long.</dd>
                <dd>
                    <note>Because the function returns a long value, you cannot specify non-numeric
                        data in the data format string. For example, the date format "MMM" returns
                        the three character abbreviation for the month (such as "Jul"), which causes
                        the function to return incorrect results.</note>
                </dd>
            </dlentry>
            <dlentry>
                <dt>time:extractStringFromDate(&lt;Date object>, &lt;format string>)</dt>
                <dd>Extracts a string value from a Date object based on the specified date
                    format.</dd>
                <dd>Uses the following arguments:</dd>
                <dd>
                    <ul id="ul_uvc_cvx_vy">
                        <li>Date object - Date object to extract the string value from.</li>
                        <li>format string - String that specifies the format of the Date data to be
                            extracted. For information about creating a date format, see <xref
                                href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"
                                format="html" scope="external"/>.</li>
                    </ul>
                </dd>
                <dd>For example, the following expression returns the month as a string value from
                    the Date object stored in the Timestamp
                    field:<codeblock>${time:extractStringFromDate(record:value('/Timestamp'), "MMM")}</codeblock></dd>
                <dd>Return type: String.</dd>
            </dlentry>
            <dlentry>
                <dt>time:extractStringFromDateTZ(&lt;Date object>, &lt;time zone>, &lt;format
                    string>)</dt>
                <dd>Extracts a string value from a Date object, converting the GMT time in the Date
                    object to the specified date format and time zone. The function adjusts for
                    daylight savings when given the time zone in the appropriate format. </dd>
                <dd>Uses the following arguments:<ul id="ul_rzw_x5c_wy">
                        <li>Date object - Date object to use.</li>
                        <li>time zone - Time zone to use in the conversion. <p>To convert the time
                                zone and adjust for daylight savings, use the
                                &lt;Area>/&lt;Location> format, such as America/Mexico_City. See the
                                following link for a list of valid time zones in this format: <xref
                                    href="https://www.vmware.com/support/developer/vc-sdk/visdk400pubs/ReferenceGuide/timezone.html"
                                    format="html" scope="external"/>.</p><p>Short time zone IDs such
                                as EST and CST return data, but note that these time zones do not
                                adjust for daylight savings, and should be avoided because they can
                                stand for multiple time zones, e.g. CST stands for both Central
                                Standard Time and China Standard Time.</p><p>You can use numeric
                                time zones with the GMT prefix, such as GMT-0500 or GMT-8:00, but
                                these time zones also do not account for daylight savings. Note that
                                numeric-only time zones such as -500 are not supported. </p></li>
                        <li>format string - String that specifies the format to use to express the
                            date. For information about creating a date format, see <xref
                                href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"
                                format="html" scope="external"/>.</li>
                    </ul></dd>
                <dd>Return type: String.</dd>
                <dd>Returns an empty string when the time zone is not specified or invalid. </dd>
                <dd>For example, the following expression converts a Date object to a string date
                    while adjusting to the America/New_York time zone and daylight savings. It
                    expresses the date in the format, "03/30/2016 12:15:33
                    AM":<codeblock>${time:extractStringFromDateTZ(record:value('/datetime'), 'America/New_York', 'MM-dd-yyyy hh:mm:ss a')}</codeblock></dd>
            </dlentry>
            <dlentry>
                <dt>time:millisecondsToDateTime(&lt;long>)</dt>
                <dd>Converts an epoch or UNIX time in milliseconds to a Date object. </dd>
                <dd>If the epoch or UNIX time is in seconds, multiply the value by 1000 to produce a
                    value in the milliseconds range. For example, the following expression
                    multiplies the epoch time in seconds stored in the epochTime field and then
                    converts the value to a Date
                    object:<codeblock>${millisecondsToDateTime(record:value("/epochTime")* 1000)}</codeblock></dd>
                <dd>Return type: Date object.</dd>
            </dlentry>
            <dlentry>
                <dt>time:now()</dt>
                <dd>Returns the current time of the <ph
                        conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"
                    /> machine as a java.util.Date object. </dd>
                <dd>For example, you might use the function in the Expression Evaluator to create a
                    field with the time of processing.</dd>
                <dd>Return type: Datetime.</dd>
            </dlentry>
            <dlentry>
                <dt>time:trimDate(&lt;datetime>)</dt>
                <dd>Trims the date portion of a datetime value by setting the date portion to
                    January 1, 1970.</dd>
                <dd>For example, if the current time of the <ph
                        conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"
                    /> machine is Jul 25, 2016 5:18:05 PM, then ${time.trimDate(time:now())}
                    returns: Jan 1, 1970 5:18:05 PM.</dd>
                <dd>Return type: Datetime. </dd>
            </dlentry>
            <dlentry>
                <dt>time:trimTime(&lt;datetime>)</dt>
                <dd>Trims the time portion of a datetime value by setting the time portion to
                    00:00:00.</dd>
                <dd>For example, if the value of the pickup_datetime field is Jul 22, 2016 11:16:10
                    AM, then ${time:trimTime(record:value("/pickup_datetime"))} returns: Jul 22,
                    2016 12:00:00 AM.</dd>
                <dd>Return type: Datetime.</dd>
            </dlentry>
        </dl>
 </conbody>
</concept>
