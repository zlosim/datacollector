<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_fmg_pjd_mz">
 <title>Tuning Threads and Runners</title>
 <conbody>
  <p><indexterm>multithreaded pipelines<indexterm>tuning threads and pipeline
                runners</indexterm></indexterm>To optimize pipeline performance and resource usage,
            you can tune the number of threads and pipeline runners that a multithreaded pipeline
            uses. <dl>
                <dlentry>
                    <dt>threads</dt>
                    <dd>Configure the maximum number of threads or concurrency in the origin.</dd>
                    <dd>Before specifying a number of threads, consider how the origin uses threads.
                        All origins use threads to connect to the origin system and create batches
                        of data, but they can perform this task differently. </dd>
                    <dd>For example, the JDBC Multitable Consumer origin uses one thread for each
                        table, so there's little point in configuring the origin to use more threads
                        than the number of tables being queried. </dd>
                    <dd>In contrast, the HTTP Server origin listens at an HTTP endpoint. When you
                        configure the number of threads to use, you should consider the maximum
                        number of threads you might feasibly use in relationship to the peak spikes
                        and the number of available pipeline runners.</dd>
                    <dd>Note that idle threads consume few resources, so little harm can come from
                        configuring extra.</dd>
                </dlentry>
                <dlentry>
                    <dt>pipeline runners</dt>
                    <dd>Configure the maximum number of pipeline runners using the Max Runners
                        pipeline property. </dd>
                    <dd>Pipeline runners consume resources even when idle. So when considering the
                        number of runners to use, you should decide if you want to optimize for
                        performance, resource usage, or both.</dd>
                    <dd>Pipeline runners process batches created by the origin threads. The speed of
                        processing might differ based on the complexity of the pipeline logic, batch
                        size, etc. </dd>
                    <dd>So to determine the number of pipeline runners that you want to use, monitor
                        the number of available runners when you run the pipeline. If you find that
                        you have an abundance of available runners, you might reduce the number of
                        runners that you allow. Conversely, if the pipeline runners are generally
                        unavailable, increasing the number of pipeline runners can improve
                        performance. </dd>
                </dlentry>
            </dl></p>
        <p>For example, say you have a pipeline with the Kinesis Consumer reading from 4 shards. In
            the origin, you set the number of threads to 4. You also leave the pipeline Max Runners
            property with the default of 0, which creates a matching number of pipeline runners for
            the threads - in this case, 4. After you start the pipeline and let it run for a while,
            you check back and find the following histogram<ph product="DPM"> in the <ph
                    conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"
                /> UI</ph>: </p>
        <p><image href="../Graphics/Multithreaded-Stats.png" id="image_av3_3rk_mz" scale="70"/></p>
        <p>The histogram shows that the mean is 1.4, which means at any time, it's likely that there
            are 1.4 available runners.</p>
        <p>If this is the peak load for the pipeline, this means you can reduce the number of
            pipeline runners used in the pipeline to 3 without sacrificing much performance. If <ph
                conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/>
            resources are needed elsewhere and you don't mind a minor hit to pipeline performance,
            you might reduce the number of pipeline runners to 2. </p>
 </conbody>
</concept>
