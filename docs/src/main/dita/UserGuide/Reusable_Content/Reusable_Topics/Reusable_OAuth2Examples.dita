<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2017 StreamSets Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="task_szr_v5f_5y">
    <title>OAuth 2 Examples</title>
    <taskbody>
        <context>
            <p>
                <draft-comment author="alisontaylor">Steps included in the examples for OAuth 2
                    authorization for the HTTP Client origin and processor</draft-comment>
                <draft-comment author="alisontaylor">Twitter example steps</draft-comment>
            </p>
        </context>
        <steps>
            <step id="Twitter_HTTP">
                <cmd>On the <uicontrol>HTTP</uicontrol> tab, set <uicontrol>Authentication
                    Type</uicontrol> to <uicontrol>Basic</uicontrol>, and then select
                    <uicontrol>Use OAuth 2</uicontrol>.</cmd>
            </step>
            <step id="Twitter_Credentials">
                <cmd>On the <uicontrol>Credentials</uicontrol> tab, enter the Twitter consumer key
                    and consumer secret for the <uicontrol>Username</uicontrol> and
                    <uicontrol>Password</uicontrol> properties.</cmd>
                <info>
                    <note conref="../ReusablePhrases.dita#concept_vhs_5tz_xp/SDCDPM_Tip_ConsumerKey"/>
                </info>
            </step>
            <step id="Twitter_OAuth2">
                <cmd>On the <uicontrol>OAuth 2</uicontrol> tab, select <uicontrol>Client Credentials
                    Grant</uicontrol> for the grant type.</cmd>
            </step>
            <step id="Twitter_TokenURL">
                <cmd>In the <uicontrol>Token URL</uicontrol> property, enter the following URL used
                    to request the access token:</cmd>
                <info>
                    <codeblock>https://api.twitter.com/oauth2/token</codeblock>
                </info>
            </step>
            <step>
                <cmd>
                    <draft-comment author="alisontaylor">Microsoft Azure AD example
                        steps</draft-comment>
                </cmd>
            </step>
            <step id="AzureAD_HTTP">
                <cmd>On the <uicontrol>HTTP</uicontrol> tab, set <uicontrol>Authentication
                    Type</uicontrol> to <uicontrol>None</uicontrol>, and then select
                    <uicontrol>Use OAuth 2</uicontrol>.</cmd>
            </step>
            <step id="AzureAD_OAuth2">
                <cmd>On the <uicontrol>OAuth 2</uicontrol> tab, select <uicontrol>Client Credentials
                    Grant</uicontrol> for the grant type.</cmd>
            </step>
            <step id="AzureAD_Token">
                <cmd>In the <uicontrol>Token URL</uicontrol> property, enter the following URL used
                    to request the access token:</cmd>
                <info>
                    <codeblock>https://login.microsoftonline.com/&lt;tenant identifier>/oauth2/token</codeblock>
                    <p>Where <codeph>&lt;tenant identifier></codeph> is the Azure AD tenant
                        identifier.</p>
                </info>
            </step>
            <step id="AzureAD_Client">
                <cmd>Enter the OAuth 2 client ID and secret.</cmd>
                <info>
                    <p>The client ID is the Application Id assigned to your app when you registered
                        it with Azure AD, found in the Azure Classic Portal.</p>
                    <p>The client secret is the application secret that you created in the app
                        registration portal for your app. </p>
                    <note
                        conref="../ReusablePhrases.dita#concept_vhs_5tz_xp/SDCDPM_Tip_ClientID"
                    />
                </info>
            </step>
            <step id="AzureAD_KeyValue">
                <cmd>Add any key-value pairs that the HTTP service requires in the token
                    request.</cmd>
                <info>In our example, we are accessing the <codeph>graph.microsoft.com</codeph> API
                    in our resource URL, so we need to add the following key-value
                    pair:<codeblock>resource : https://graph.microsoft.com/</codeblock></info>
            </step>
            <step>
                <cmd>
                    <draft-comment author="alisontaylor">Google example steps</draft-comment>
                </cmd>
            </step>
            <step id="Google_HTTP">
                <cmd>On the <uicontrol>HTTP</uicontrol> tab, set <uicontrol>Authentication
                    Type</uicontrol> to <uicontrol>None</uicontrol>, and then select
                    <uicontrol>Use OAuth 2</uicontrol>.</cmd>
            </step>
            <step id="Google_OAuth2">
                <cmd>On the <uicontrol>OAuth 2</uicontrol> tab, select <uicontrol>JSON Web
                    Tokens</uicontrol> for the grant type.</cmd>
            </step>
            <step id="Google_Token">
                <cmd>In the <uicontrol>Token URL</uicontrol> property, enter the following URL used
                    to request the access token:</cmd>
                <info>
                    <codeblock>https://www.googleapis.com/oauth2/v4/token</codeblock>
                </info>
            </step>
            <step id="Google_Algorithm">
                <cmd>Select the following algorithm to sign the JWT: <uicontrol>RSASSA-PKCS-v1_5
                        using SHA-256</uicontrol>.</cmd>
            </step>
            <step id="Google_JWTKey">
                <cmd>Enter the Base64 encoded key used to sign the JWT.</cmd>
                <info>
                    <p>To access the key, download the JSON key file when you generate the Google
                        credentials. Locate the "private_key" field in the file, which contains a
                        string version of the key. Copy the string into the <uicontrol>JWT Signing
                            Key</uicontrol> property, and then replace all "\n" literals with new
                        lines.</p><note
                    conref="../ReusablePhrases.dita#concept_vhs_5tz_xp/SDCDPM_Tip_JWTKey"
                />
                </info>
            </step>
            <step id="Google_JWTClaims">
                <cmd>In the <uicontrol>JWT Claims</uicontrol> property, enter the required claims to
                    use with the JWT token request, in JSON format.</cmd>
                <info><p>For a list of the required claims for Google service accounts, see <xref
                            href="https://developers.google.com/identity/protocols/OAuth2ServiceAccount#creatingjwt"
                            format="html" scope="external"/>.</p>For example, enter the claims in
                    the following JSON
                        format:<codeblock>{
   "iss":"my_name@my_account.iam.gserviceaccount.com",
   "scope":"https://www.googleapis.com/auth/drive",
   "aud":"https://www.googleapis.com/oauth2/v4/token",
   "exp":${(time:dateTimeToMilliseconds(time:now())/1000) + 50 * MINUTES},
   "iat":${time:dateTimeToMilliseconds(time:now())/1000}
}</codeblock><p>You
                        can include the expression language in the JWT claims. For example, in the
                        sample claim above, both the "exp" (expiration time) claim and the "iat"
                        (issued at) claim include <ph
                            conref="../ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/> time
                        functions to set the expiration time and the issue time. </p><note
                        type="tip">Google access tokens expire after 60 minutes. As a result, set
                        the expiration time claim to be slightly less than 60 minutes so that HTTP
                        Client can request a new token within the time limit. </note></info>
            </step>
        </steps>
    </taskbody>
</task>
